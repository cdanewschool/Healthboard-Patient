<?xml version="1.0" encoding="utf-8"?>
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	gap="0"
	width="678" height="222" 
	addedToStage="onAdded()" removedFromStage="onRemoved()" creationComplete="init()">
	
	<fx:Declarations>
		<s:LinearGradient id="headerFill" rotation="90">
			<s:GradientEntry color="0xEFEFEF" />
			<s:GradientEntry color="0XB9B9B9" />
		</s:LinearGradient>
		
		<s:RadioButtonGroup id="radioGroup" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.popups.YourNextStepsPopup;
			
			import controllers.MedicalRecordsController;
			
			import models.NextStep;
			import models.modules.MedicalRecordsModel;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.events.CollectionEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import spark.collections.SortField;
			import spark.events.IndexChangeEvent;
			
			import util.DateFormatters;
			
			[Bindable] private var controller:MedicalRecordsController = AppProperties.getInstance().controller.medicalRecordsController as MedicalRecordsController;
			[Bindable] public var model:MedicalRecordsModel = controller.model as MedicalRecordsModel;
			
			private var sort:Sort = new Sort();
			private var timer:Timer;
			private var explanationPopup:YourNextStepsPopup;
			
			private function getDateLabel(item:NextStep,column:DataGridColumn):String
			{
				return DateFormatters.dateOnlyBackslashDelimited.format( item.dateAssigned );
			}
			
			private function getTooltip(item:NextStep):String
			{
				var tip:String = "";
				
				if( item != null 
					&& !item.completed )
				{
					tip = "Mark as completed";
				}
				
				return tip;
			}
			
			private function update():void
			{
				model.medicalRecordsNextSteps.sort = sort;
				model.medicalRecordsNextSteps.refresh();
			}
			
			private function onFilterClick(event:MouseEvent):void
			{
				update();
			}
			
			private function onItemClick(event:ListEvent):void
			{
				grid.selectedItem = null;
			}
			
			public function markAsComplete(item:NextStep):void
			{
				item.completed = true;
				item.status = "inactive";
				
				model.medicalRecordsNextSteps.dispatchEvent( new CollectionEvent( CollectionEvent.COLLECTION_CHANGE ) );
				
				timer.reset();
				timer.start();
				
				grid.selectedItem = null;
			}
			
			public function markAsRemoved(item:NextStep):void
			{
				item.removed = true;
				item.status = "inactive";
				
				model.medicalRecordsNextSteps.dispatchEvent( new CollectionEvent( CollectionEvent.COLLECTION_CHANGE ) );
				
				timer.reset();
				timer.start();
				
				grid.selectedItem = null;
			}
			
			private function onWhatClick(event:MouseEvent):void
			{
				if( explanationPopup && explanationPopup.parent ) PopUpManager.removePopUp( explanationPopup );
				
				explanationPopup = PopUpManager.createPopUp( AppProperties.getInstance().controller.application, YourNextStepsPopup ) as YourNextStepsPopup;
				PopUpManager.centerPopUp( explanationPopup );
			}
			
			private function filterByRemoved( item:NextStep ):Boolean
			{
				return (radioGroup.selectedValue == 'all' ? true : item.status == 'active');
			}
			
			private function onTimerComplete(event:TimerEvent):void
			{
				model.medicalRecordsNextSteps.refresh();
			}
			
			private function onAdded():void
			{
				radioGroup.selectedValue = "active";
				update();
			}
			
			private function onRemoved():void
			{
				radioGroup.selectedValue = "active";
				update();
			}
			
			private function init():void
			{
				timer = new Timer( 1000, 1 );
				timer.addEventListener( TimerEvent.TIMER_COMPLETE, onTimerComplete );
				
				sort = new Sort();
				sort.fields = [ new SortField('completed') ];
				
				model.medicalRecordsNextSteps.sort = sort;
				model.medicalRecordsNextSteps.filterFunction = filterByRemoved;
				model.medicalRecordsNextSteps.refresh();
			}
		]]>
	</fx:Script>
	
	<s:BorderContainer width="100%" height="26" backgroundFill="{headerFill}" borderAlpha="0">
		
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="10" paddingRight="10">
			
			<mx:LinkButton label="What's this?" click="onWhatClick(event)" styleName="linkBtnDarkBlue" />
			
			<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle">
				<s:Label text="View:" paddingTop="2" />
				<s:RadioButton label="In Progress" groupName="radioGroup" value="active" click="onFilterClick(event)" />
				<s:RadioButton label="All" groupName="radioGroup" value="all" click="onFilterClick(event)" toolTip="Select to view all" />
			</s:HGroup>
			
		</s:HGroup>
		
	</s:BorderContainer>
	
	<mx:DataGrid 
		id="grid"
		dataProvider="{model.medicalRecordsNextSteps}" styleName="standardDataGrid" fontFamily="myMyriad"
		width="100%" height="100%"  
		headerStyleName="dataGridHeader"
		fontSize="12"
		horizontalGridLineColor="0x444442" horizontalGridLines="true" alternatingItemColors="[0x3C3C3B,0x3C3C3B]"
		paddingTop="6" rowCount="8"
		itemClick="onItemClick(event)" dataTipFunction="getTooltip">
		
		<mx:columns>
			<mx:DataGridColumn dataField="urgency" headerText="Urgency" width="75" color="0xAEDEE4">
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox width="68" horizontalAlign="center" paddingTop="5">
							<fx:Script>
								<![CDATA[
									import enum.UrgencyType;
								]]>
							</fx:Script>
							<s:Image source="@Embed('images/messagesUrgentSmall.png')" toolTip="Urgent" visible="{data.urgency == UrgencyType.URGENT}" includeInLayout="{data.urgency == UrgencyType.URGENT}" />
							<s:Image source="@Embed('images/messagesSomewhatUrgentSmall.png')" toolTip="Somewhat urgent" visible="{data.urgency == UrgencyType.SOMEWHAT_URGENT}" includeInLayout="{data.urgency == UrgencyType.SOMEWHAT_URGENT}" />
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			
			<mx:DataGridColumn dataField="dateAssigned" headerText="Assigned On" width="92" paddingLeft="10" labelFunction="getDateLabel" itemRenderer="components.itemrenderers.datagridcolumn.CustomRowColorAlternative" />
			<mx:DataGridColumn dataField="recommendation" headerText="Next Steps" width="290" paddingLeft="10" itemRenderer="components.itemrenderers.datagridcolumn.CustomRowColorAlternative" />
			<mx:DataGridColumn dataField="assignee" headerText="Assignee" width="96" paddingLeft="10" itemRenderer="components.itemrenderers.datagridcolumn.CustomRowColorAlternative" />			
			<mx:DataGridColumn dataField="completed" headerText="Status" width="112" paddingLeft="10" showDataTips="true">
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox paddingTop="5" horizontalGap="10">
							<fx:Script>
								<![CDATA[
									import models.NextStep;
								]]>
							</fx:Script>
							<s:Label text="{data.completed ? 'Complete' : 'In Progress'}" color="{data.status == 'inactive' ? 0x999999 : 0xAEDEE4}" fontFamily="myMyriad" />
							<s:Image source="@Embed('images/checkmarkNextStepsWhite.png')" alpha=".5" buttonMode="true" click="outerDocument.markAsComplete(NextStep(data))" toolTip="Click to mark as complete" visible="{!data.completed}" includeInLayout="{!data.completed}" />
							<s:Image source="@Embed('images/checkmarkNextSteps.png')" visible="{data.completed}" includeInLayout="{data.completed}" />
							<s:Image source="@Embed('images/btnCloseTiny.png')" visible="{!data.completed}" alpha=".6" buttonMode="true" click="outerDocument.markAsRemoved(NextStep(data))" toolTip="Click to mark as removed" />
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</mx:columns> 
		
	</mx:DataGrid>
	
</s:VGroup>
