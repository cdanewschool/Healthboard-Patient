<?xml version="1.0" encoding="utf-8"?>
<!-- http://blog.flexexamples.com/2010/05/04/setting-a-solid-tab-fill-on-a-spark-tabbar-control-in-flex-4/ -->
<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.  

     @see spark.components.ToggleButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="21" minHeight="21" 
                   alpha.disabledStates="0.5">
	<fx:Metadata>[HostComponent("spark.components.ButtonBarButton")]</fx:Metadata>
    
    <!-- host component -->
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */    
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
        /**
         * @private
         */
		override protected function updateDisplayList(unscaledWidth:Number, unscaleHeight:Number):void {
			updateCornerRadius();
			//updateSelectedHighlight(unscaledWidth, unscaledHeight);
			updateBorderTop(unscaledWidth, unscaledHeight);
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		private function updateCornerRadius():void {
			var cr:Number = getStyle("cornerRadius");
			if (cornerRadius != cr) {
				cornerRadius = cr;
				fill.topLeftRadiusX = cornerRadius;
				fill.topRightRadiusX = cornerRadius;
				//highlightStroke.topLeftRadiusX = cornerRadius;
				//highlightStroke.topRightRadiusX = cornerRadius;
			}
		}
		
		private function updateBorderTop(width:Number, height:Number):void {
			var path:String = createPathData(true);
			borderTop.data = path;
		}
		
		private function createPathData(isBorder:Boolean):String {
			var left:Number = -0.5;  // assuming stroke weight is 1.0
			var right:Number = width - 0.5;
			var top:Number = 0.5;
			var bottom:Number = height;
			
			var a:Number = cornerRadius * 0.292893218813453;
			var s:Number = cornerRadius * 0.585786437626905;
			
			// If the path is for the highlight,
			// Draw the vertical part of the selected tab highlight that's rendered
			// with alpha=0.07.  The s:Path is configured to include only the left and
			// right edges of an s:Rect, along with the top left,right rounded corners.
			// Otherwise, we draw a full path.
			var path:String = "";
			path +=  "M " + left + " " + bottom;
			path += " L " + left + " " + (top + cornerRadius);
			path += " Q " + left + " " + (top + s) + " " + (left + a) + " " + (top + a);
			path += " Q " + (left + s) + " " + top + " " + (left + cornerRadius) + " " + top;
			
			if (isBorder)
				path += " L " + (right - cornerRadius) + " " + top;
			else
				path += " M " + (right - cornerRadius) + " " + top;
			
			path += " Q " + (right - s) + " " + top + " " + (right - a) + " " + (top + a);
			path += " Q " + right + " " + (top + s) + " " + right + " " + (top + cornerRadius);
			path += " L " + right + " " + bottom;
			
			return path;
		}
        
        private var cornerRadius:Number = 4;
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
    
	<!--- layer 2: fill -->
	<s:Rect id="fill"
			left="1" right="1" top="1" bottom="1"
			topLeftRadiusX="4" topRightRadiusX="4"
			width="69" height="21">
		<s:fill>
			<s:SolidColor color="0x4A4A49"
						  color.selectedUpStates="0x706F6F"
						  color.overStates="0x706F6F"
						  color.downStates="0x706F6F"
						  alpha="1"
						  alpha.overAndSelected="1" />	<!--color.overStates="0xBBBDBD" color.downStates="0xAAAAAA"-->
		</s:fill>
	</s:Rect>
	
	
	<!--- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<s:Line id="borderBottom"
			left="0" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke weight="1"
								color="0xBDBCBC"
								color.selectedStates="0x706F6F"
								alpha="1"
								alpha.down="1"
								alpha.selectedStates="1" />
		</s:stroke>
	</s:Line>
	
	<s:Path id="borderTop"
			left="0" right="0" top="0" bottom="0"
			width="69" height="21">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0xBDBCBC"
								 alpha="1"
								 alpha.down="1"
								 alpha.selectedStates="1" />
				<s:GradientEntry color="0xBDBCBC"
								 alpha="1"
								 alpha.down="1"
								 alpha.selectedStates="1" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Path>
	
	<!-- layer 8: text -->
	<s:Label id="labelDisplay"
			 textAlign="center"
			 verticalAlign="middle"
			 maxDisplayedLines="1"
			 horizontalCenter="0" verticalCenter="1"
			 left="10" right="10" top="2" bottom="2" />
    
</s:SparkButtonSkin>
